<!-- scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 
	debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
	<springProperty scope="context" name="app_name" source="spring.application.name" />
	<include resource="org/springframework/boot/logging/logback/defaults.xml" />
	<!-- window, dev -->
	<property name="LOG_FILE" value="logs/${app_name}" />
	<!-- Unix, dev -->
	<property name="UNIX_LOG_FILE" value="/var/log/${app_name}" />

	<include resource="org/springframework/boot/logging/logback/console-appender.xml" />
	<jmxConfigurator />


	<!-- 控制台输出 -->
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<!-- encoders are assigned the type ch.qos.logback.classic.encoder.PatternLayoutEncoder by default -->
		<!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 -->
		<encoder>
			<pattern>
				%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n
			</pattern>
		</encoder>
	</appender>

	<!-- 生成日志文件 -->
	<appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 如果没设置file，活动文件的名字会根据fileNamePattern 的值，每隔一段时间改变一次。 -->
		<!-- <file>${LOG_FILE}.log</file> -->
		<!-- 支持多JVM同时操作同一个日志文件，效率低下 -->
		<!-- <prudent>true</prudent> -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${LOG_FILE}/%d{yyyy-MM-dd}.log</fileNamePattern>
			<!-- <FileNamePattern>/usr/project/logs/test_cluster_slave_log-%d{yyyy-MM-dd}-%i.log</FileNamePattern> -->
			<!--日志文件保留天数 -->
			<MaxHistory>1</MaxHistory>
			<!-- 可选节点，用来指定日志文件的上限大小，例如设置为3GB的话，那么到了这个值，就会删除旧的日志 -->
			<totalSizeCap>20MB</totalSizeCap>
		</rollingPolicy>
		<!--日志文件最大的大小 -->
		<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
			<MaxFileSize>10MB</MaxFileSize>
		</triggeringPolicy>
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 -->
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n
			</pattern>
		</encoder>
	</appender>

	<!-- 开发环境时激活 -->
	<springProfile name="dev">
		<root level="INFO">
			<appender-ref ref="STDOUT" />
			<!-- <appender-ref ref="FILE" /> -->
		</root>
	</springProfile>

	<!-- 生产、测试环境时激活 -->
	<springProfile name="test, pro">
		<root level="DEBUG">
			<appender-ref ref="STDOUT" />
			<appender-ref ref="FILE" />
		</root>
	</springProfile>
</configuration>